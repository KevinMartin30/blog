(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{597:function(t,s,n){"use strict";n.r(s);var e=n(2),r=Object(e.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("p",[s("strong",[this._v("1.myPromise")])]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('class myPromise {\n    static PENDING = "待定";\n    static FULFILLED = "成功";\n    static REJECTED = "拒绝";\n    constructor(func) {\n      this.status = myPromise.PENDING;\n      this.result = null;\n      this.resolveCallbacks = [];\n      this.rejectCallbacks = [];\n      try {\n        func(this.resolve.bind(this), this.reject.bind(this));\n      } catch (error) {\n        this.reject(error);\n      }\n    }\n    resolve(result) {\n      setTimeout(() => {\n        if (this.status === myPromise.PENDING) {\n          this.status = myPromise.FULFILLED;\n          this.result = result;\n          this.resolveCallbacks.forEach((callback) => {\n            callback(result);\n          });\n        }\n      });\n    }\n    reject(result) {\n      setTimeout(() => {\n        if (this.status === myPromise.PENDING) {\n          this.status = myPromise.REJECTED;\n          this.result = result;\n          this.rejectCallbacks.forEach((callback) => {\n            callback(result);\n          });\n        }\n      });\n    }\n    then(onFULFILLED, onREJECTED) {\n      return new myPromise((resolve, reject) => {\n        onFULFILLED =\n          typeof onFULFILLED === "function" ? onFULFILLED : () => {};\n        onREJECTED =\n          typeof onREJECTED === "function" ? onREJECTED : () => {};\n        if (this.status === myPromise.PENDING) {\n          this.resolveCallbacks.push(() => {\n            resolve(onFULFILLED(this.result));\n          });\n          this.rejectCallbacks.push(() => {\n            reject(onREJECTED(this.result));\n          });\n        }\n        if (this.status === myPromise.FULFILLED) {\n          setTimeout(() => {\n            onFULFILLED(this.result);\n          });\n        }\n        if (this.status === myPromise.REJECTED) {\n          setTimeout(() => {\n            onREJECTED(this.result);\n          });\n        }\n      });\n    }\n}\n')])])]),s("p",[s("strong",[this._v("2.测试代码")])]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    <script>\n      class myPromise {\n        static PENDING = "待定";\n        static FULFILLED = "成功";\n        static REJECTED = "拒绝";\n        constructor(func) {\n          this.status = myPromise.PENDING;\n          this.result = null;\n          this.resolveCallbacks = [];\n          this.rejectCallbacks = [];\n          try {\n            func(this.resolve.bind(this), this.reject.bind(this));\n          } catch (error) {\n            this.reject(error);\n          }\n        }\n        resolve(result) {\n          setTimeout(() => {\n            if (this.status === myPromise.PENDING) {\n              this.status = myPromise.FULFILLED;\n              this.result = result;\n              this.resolveCallbacks.forEach((callback) => {\n                callback(result);\n              });\n            }\n          });\n        }\n        reject(result) {\n          setTimeout(() => {\n            if (this.status === myPromise.PENDING) {\n              this.status = myPromise.REJECTED;\n              this.result = result;\n              this.rejectCallbacks.forEach((callback) => {\n                callback(result);\n              });\n            }\n          });\n        }\n        then(onFULFILLED, onREJECTED) {\n          return new myPromise((resolve, reject) => {\n            onFULFILLED =\n              typeof onFULFILLED === "function" ? onFULFILLED : () => {};\n            onREJECTED =\n              typeof onREJECTED === "function" ? onREJECTED : () => {};\n            if (this.status === myPromise.PENDING) {\n              this.resolveCallbacks.push(() => {\n                resolve(onFULFILLED(this.result));\n              });\n              this.rejectCallbacks.push(() => {\n                reject(onREJECTED(this.result));\n              });\n            }\n            if (this.status === myPromise.FULFILLED) {\n              setTimeout(() => {\n                onFULFILLED(this.result);\n              });\n            }\n            if (this.status === myPromise.REJECTED) {\n              setTimeout(() => {\n                onREJECTED(this.result);\n              });\n            }\n          });\n        }\n      }\n      let promise = new myPromise((resolve, reject) => {\n        resolve("stephen");\n      });\n      promise\n        .then(\n          (result) => {\n            console.log(result);\n            return "martin";\n          },\n          (result) => console.log(result.message)\n        )\n        .then(\n          (result) => console.log(result),\n          (result) => console.log(result.message)\n        );\n    <\/script>\n  </body>\n</html>\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);