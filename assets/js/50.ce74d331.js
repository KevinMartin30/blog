(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{596:function(n,t,e){"use strict";e.r(t);var r=e(2),o=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[e("strong",[n._v("1.call")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Function.prototype.myCall = function (obj, ...args) {\n    if (typeof this !== "function") {\n      throw new TypeError("Error");\n    }\n    const newObj = obj || window;\n    newObj.fn = this;\n    const result = newObj.fn(...args);\n    delete newObj.fn;\n    return result;\n};\n')])])]),e("p",[e("strong",[n._v("2.apply")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Function.prototype.myApply = function (obj, args) {\n    if (typeof this !== "function") {\n      throw new TypeError("Error");\n    }\n    const newObj = obj || window;\n    newObj.fn = this;\n    const result = newObj.fn(...args);\n    delete newObj.fn;\n    return result;\n};\n')])])]),e("p",[e("strong",[n._v("3.bind")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Function.prototype.myBind = function (obj, ...args) {\n    if (typeof this !== "function") {\n      throw new TypeError("Error");\n    }\n    const that = this;\n    return function Fn() {\n      // 根据调用方式，传入不同绑定值\n      return that.apply(\n      \t// this instanceof Fn 用于判断是否通过new调用Fn\n        this instanceof Fn ? this : obj,\n        args.concat(...arguments)\n      );\n    };\n};\n')])])]),e("p",[e("strong",[n._v("4.测试代码")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function person(a, b, c, d) {\n    console.log(this.name);\n    console.log(a, b, c, d);\n}\nlet man = { name: "martin" };\nperson.call(man, 1, 2, 3, 4);\nFunction.prototype.myCall = function (obj, ...args) {\n    if (typeof this !== "function") {\n      throw new TypeError("Error");\n    }\n    const newObj = obj || window;\n    newObj.fn = this;\n    const result = newObj.fn(...args);\n    delete newObj.fn;\n    return result;\n};\nlet a = person.myCall(man, 1, 2, 3, 4);\nconsole.log(a);\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);